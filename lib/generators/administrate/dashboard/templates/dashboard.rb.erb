require "administrate/base_dashboard"

class <%= class_name %>Dashboard < Administrate::BaseDashboard
  # ATTRIBUTE_TYPES
  # a hash that describes the type of each of the model's fields.
  #
  # Each different type represents an Administrate::Field object,
  # which determines how the attribute is displayed
  # on pages throughout the dashboard.
  ATTRIBUTE_TYPES = {
<% attributes.each do |attr| -%>
    <%= attr %>: <%= field_type(attr) %>,
<% end -%>
  }

  # COLLECTION_ATTRIBUTES
  # an array of attributes that will be displayed on the model's index page.
  #
  # By default, it's limited to four items to reduce clutter on index pages.
  # Feel free to add, remove, or rearrange items.
  COLLECTION_ATTRIBUTES = [
<%=
  attributes.first(COLLECTION_ATTRIBUTE_LIMIT).map do |attr|
    "    :#{attr},"
  end.join("\n")
%>
  ]

  # SHOW_PAGE_ATTRIBUTES
  # an array of attributes that will be displayed on the model's show page.
  SHOW_PAGE_ATTRIBUTES = [
<%=
  attributes.map do |attr|
    "    :#{attr},"
  end.join("\n")
%>
  ]

  # FORM_ATTRIBUTES
  # an array of attributes that will be displayed
  # on the model's form (`new` and `edit`) pages.
  FORM_ATTRIBUTES = [
<%=
  form_attributes.map do |attr|
    "    :#{attr},"
  end.join("\n")
%>
  ]

  # Overwrite this method to customize how <%= file_name.pluralize.humanize.downcase %> are displayed
  # across all pages of the admin dashboard.
  #
  # def display_resource(<%= file_name %>)
  #   "<%= class_name %> ##{<%= file_name %>.id}"
  # end

  # Use the ALTERNAVIVE_VIEWS hash if you want to use an alternative controller
  # or view to show any resource managed by this dashboard. Buttons to these
  # views will be shown while showing the resource in the Administrate's show
  # view.
  #
  # The keys of the hash will be the name used by Administrate to get the I18n
  # translation of the view name, and the values the route helper name that
  # will generate the resource's path for that view. For example, with:
  #
  #   ALTERNATIVE_VIEWS = {
  #     offer_detail: :offer_path,
  #   }
  #
  # We'll see a new button while showing any resource with a link to
  # *offer_path(resource)* with the caption defined for the request's locale
  # in the *administrate.alternative_views.offer_detail* key.
end
